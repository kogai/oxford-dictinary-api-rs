/* 
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct LanguagesResults {
  /// Name of region.
  #[serde(rename = "region")]
  region: Option<String>,
  /// Name of source dictionary.
  #[serde(rename = "source")]
  source: Option<String>,
  #[serde(rename = "sourceLanguage")]
  source_language: Option<::models::LanguagesSourceLanguage>,
  #[serde(rename = "targetLanguage")]
  target_language: Option<::models::LanguagesTargetLanguage>,
  /// whether monolingual or bilingual.
  #[serde(rename = "type")]
  _type: Option<String>
}

impl LanguagesResults {
  pub fn new() -> LanguagesResults {
    LanguagesResults {
      region: None,
      source: None,
      source_language: None,
      target_language: None,
      _type: None
    }
  }

  pub fn set_region(&mut self, region: String) {
    self.region = Some(region);
  }

  pub fn with_region(mut self, region: String) -> LanguagesResults {
    self.region = Some(region);
    self
  }

  pub fn region(&self) -> Option<&String> {
    self.region.as_ref()
  }

  pub fn reset_region(&mut self) {
    self.region = None;
  }

  pub fn set_source(&mut self, source: String) {
    self.source = Some(source);
  }

  pub fn with_source(mut self, source: String) -> LanguagesResults {
    self.source = Some(source);
    self
  }

  pub fn source(&self) -> Option<&String> {
    self.source.as_ref()
  }

  pub fn reset_source(&mut self) {
    self.source = None;
  }

  pub fn set_source_language(&mut self, source_language: ::models::LanguagesSourceLanguage) {
    self.source_language = Some(source_language);
  }

  pub fn with_source_language(mut self, source_language: ::models::LanguagesSourceLanguage) -> LanguagesResults {
    self.source_language = Some(source_language);
    self
  }

  pub fn source_language(&self) -> Option<&::models::LanguagesSourceLanguage> {
    self.source_language.as_ref()
  }

  pub fn reset_source_language(&mut self) {
    self.source_language = None;
  }

  pub fn set_target_language(&mut self, target_language: ::models::LanguagesTargetLanguage) {
    self.target_language = Some(target_language);
  }

  pub fn with_target_language(mut self, target_language: ::models::LanguagesTargetLanguage) -> LanguagesResults {
    self.target_language = Some(target_language);
    self
  }

  pub fn target_language(&self) -> Option<&::models::LanguagesTargetLanguage> {
    self.target_language.as_ref()
  }

  pub fn reset_target_language(&mut self) {
    self.target_language = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> LanguagesResults {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

}



