/* 
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ThesaurusLexicalEntry : Description of an entry for a particular part of speech

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ThesaurusLexicalEntry {
  #[serde(rename = "entries")]
  entries: Option<Vec<::models::ThesaurusEntry>>,
  /// IANA language code
  #[serde(rename = "language")]
  language: String,
  /// A linguistic category of words (or more precisely lexical items), generally defined by the syntactic or morphological behaviour of the lexical item in question, such as noun or verb
  #[serde(rename = "lexicalCategory")]
  lexical_category: String,
  /// A given written or spoken realisation of a an entry.
  #[serde(rename = "text")]
  text: String,
  /// Various words that are used interchangeably depending on the context, e.g 'a' and 'an'
  #[serde(rename = "variantForms")]
  variant_forms: Option<::models::VariantFormsList>
}

impl ThesaurusLexicalEntry {
  /// Description of an entry for a particular part of speech
  pub fn new(language: String, lexical_category: String, text: String) -> ThesaurusLexicalEntry {
    ThesaurusLexicalEntry {
      entries: None,
      language: language,
      lexical_category: lexical_category,
      text: text,
      variant_forms: None
    }
  }

  pub fn set_entries(&mut self, entries: Vec<::models::ThesaurusEntry>) {
    self.entries = Some(entries);
  }

  pub fn with_entries(mut self, entries: Vec<::models::ThesaurusEntry>) -> ThesaurusLexicalEntry {
    self.entries = Some(entries);
    self
  }

  pub fn entries(&self) -> Option<&Vec<::models::ThesaurusEntry>> {
    self.entries.as_ref()
  }

  pub fn reset_entries(&mut self) {
    self.entries = None;
  }

  pub fn set_language(&mut self, language: String) {
    self.language = language;
  }

  pub fn with_language(mut self, language: String) -> ThesaurusLexicalEntry {
    self.language = language;
    self
  }

  pub fn language(&self) -> &String {
    &self.language
  }


  pub fn set_lexical_category(&mut self, lexical_category: String) {
    self.lexical_category = lexical_category;
  }

  pub fn with_lexical_category(mut self, lexical_category: String) -> ThesaurusLexicalEntry {
    self.lexical_category = lexical_category;
    self
  }

  pub fn lexical_category(&self) -> &String {
    &self.lexical_category
  }


  pub fn set_text(&mut self, text: String) {
    self.text = text;
  }

  pub fn with_text(mut self, text: String) -> ThesaurusLexicalEntry {
    self.text = text;
    self
  }

  pub fn text(&self) -> &String {
    &self.text
  }


  pub fn set_variant_forms(&mut self, variant_forms: ::models::VariantFormsList) {
    self.variant_forms = Some(variant_forms);
  }

  pub fn with_variant_forms(mut self, variant_forms: ::models::VariantFormsList) -> ThesaurusLexicalEntry {
    self.variant_forms = Some(variant_forms);
    self
  }

  pub fn variant_forms(&self) -> Option<&::models::VariantFormsList> {
    self.variant_forms.as_ref()
  }

  pub fn reset_variant_forms(&mut self) {
    self.variant_forms = None;
  }

}



