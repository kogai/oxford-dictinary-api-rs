/*
 *
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ExamplesListInner {
  /// A list of statements of the exact meaning of a word
  #[serde(rename = "definitions")]
  definitions: Option<Vec<String>>,
  /// A subject, discipline, or branch of knowledge particular to the Sense
  #[serde(rename = "domains")]
  domains: Option<Vec<String>>,
  #[serde(rename = "notes")]
  notes: Option<Vec<::models::CategorizedTextListInner>>,
  /// A particular area in which the pronunciation occurs, e.g. 'Great Britain'
  #[serde(rename = "regions")]
  regions: Option<Vec<String>>,
  /// A level of language usage, typically with respect to formality. e.g. 'offensive', 'informal'
  #[serde(rename = "registers")]
  registers: Option<Vec<String>>,
  /// The list of sense identifiers related to the example. Provided in the sentences endpoint only.
  #[serde(rename = "senseIds")]
  sense_ids: Option<Vec<String>>,
  #[serde(rename = "text")]
  text: String,
  #[serde(rename = "translations")]
  translations: Option<Vec<::models::TranslationsListInner>>,
}

impl ExamplesListInner {
  pub fn new(text: String) -> ExamplesListInner {
    ExamplesListInner {
      definitions: None,
      domains: None,
      notes: None,
      regions: None,
      registers: None,
      sense_ids: None,
      text: text,
      translations: None,
    }
  }

  pub fn set_definitions(&mut self, definitions: Vec<String>) {
    self.definitions = Some(definitions);
  }

  pub fn with_definitions(mut self, definitions: Vec<String>) -> ExamplesListInner {
    self.definitions = Some(definitions);
    self
  }

  pub fn definitions(&self) -> Option<&Vec<String>> {
    self.definitions.as_ref()
  }

  pub fn reset_definitions(&mut self) {
    self.definitions = None;
  }

  pub fn set_domains(&mut self, domains: Vec<String>) {
    self.domains = Some(domains);
  }

  pub fn with_domains(mut self, domains: Vec<String>) -> ExamplesListInner {
    self.domains = Some(domains);
    self
  }

  pub fn domains(&self) -> Option<&Vec<String>> {
    self.domains.as_ref()
  }

  pub fn reset_domains(&mut self) {
    self.domains = None;
  }

  pub fn set_notes(&mut self, notes: Vec<::models::CategorizedTextListInner>) {
    self.notes = Some(notes);
  }

  pub fn with_notes(mut self, notes: Vec<::models::CategorizedTextListInner>) -> ExamplesListInner {
    self.notes = Some(notes);
    self
  }

  pub fn notes(&self) -> Option<&Vec<::models::CategorizedTextListInner>> {
    self.notes.as_ref()
  }

  pub fn reset_notes(&mut self) {
    self.notes = None;
  }

  pub fn set_regions(&mut self, regions: Vec<String>) {
    self.regions = Some(regions);
  }

  pub fn with_regions(mut self, regions: Vec<String>) -> ExamplesListInner {
    self.regions = Some(regions);
    self
  }

  pub fn regions(&self) -> Option<&Vec<String>> {
    self.regions.as_ref()
  }

  pub fn reset_regions(&mut self) {
    self.regions = None;
  }

  pub fn set_registers(&mut self, registers: Vec<String>) {
    self.registers = Some(registers);
  }

  pub fn with_registers(mut self, registers: Vec<String>) -> ExamplesListInner {
    self.registers = Some(registers);
    self
  }

  pub fn registers(&self) -> Option<&Vec<String>> {
    self.registers.as_ref()
  }

  pub fn reset_registers(&mut self) {
    self.registers = None;
  }

  pub fn set_sense_ids(&mut self, sense_ids: Vec<String>) {
    self.sense_ids = Some(sense_ids);
  }

  pub fn with_sense_ids(mut self, sense_ids: Vec<String>) -> ExamplesListInner {
    self.sense_ids = Some(sense_ids);
    self
  }

  pub fn sense_ids(&self) -> Option<&Vec<String>> {
    self.sense_ids.as_ref()
  }

  pub fn reset_sense_ids(&mut self) {
    self.sense_ids = None;
  }

  pub fn set_text(&mut self, text: String) {
    self.text = text;
  }

  pub fn with_text(mut self, text: String) -> ExamplesListInner {
    self.text = text;
    self
  }

  pub fn text(&self) -> &String {
    &self.text
  }

  pub fn set_translations(&mut self, translations: Vec<::models::TranslationsListInner>) {
    self.translations = Some(translations);
  }

  pub fn with_translations(
    mut self,
    translations: Vec<::models::TranslationsListInner>,
  ) -> ExamplesListInner {
    self.translations = Some(translations);
    self
  }

  pub fn translations(&self) -> Option<&Vec<::models::TranslationsListInner>> {
    self.translations.as_ref()
  }

  pub fn reset_translations(&mut self) {
    self.translations = None;
  }
}
