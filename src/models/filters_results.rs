/* 
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// FiltersResults : A mapping of filters available per endpoints.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FiltersResults {
  /// A list of filters available for Retrieve Entry endpoint
  #[serde(rename = "entries")]
  entries: Option<::models::Arrayofstrings>,
  /// A list of filters available for LEMMATRON endpoint
  #[serde(rename = "inflections")]
  inflections: Option<::models::Arrayofstrings>,
  /// A list of filters available for Translations endpoint
  #[serde(rename = "translations")]
  translations: Option<::models::Arrayofstrings>,
  /// A list of filters available for Translations endpoint
  #[serde(rename = "wordlist")]
  wordlist: Option<::models::Arrayofstrings>
}

impl FiltersResults {
  /// A mapping of filters available per endpoints.
  pub fn new() -> FiltersResults {
    FiltersResults {
      entries: None,
      inflections: None,
      translations: None,
      wordlist: None
    }
  }

  pub fn set_entries(&mut self, entries: ::models::Arrayofstrings) {
    self.entries = Some(entries);
  }

  pub fn with_entries(mut self, entries: ::models::Arrayofstrings) -> FiltersResults {
    self.entries = Some(entries);
    self
  }

  pub fn entries(&self) -> Option<&::models::Arrayofstrings> {
    self.entries.as_ref()
  }

  pub fn reset_entries(&mut self) {
    self.entries = None;
  }

  pub fn set_inflections(&mut self, inflections: ::models::Arrayofstrings) {
    self.inflections = Some(inflections);
  }

  pub fn with_inflections(mut self, inflections: ::models::Arrayofstrings) -> FiltersResults {
    self.inflections = Some(inflections);
    self
  }

  pub fn inflections(&self) -> Option<&::models::Arrayofstrings> {
    self.inflections.as_ref()
  }

  pub fn reset_inflections(&mut self) {
    self.inflections = None;
  }

  pub fn set_translations(&mut self, translations: ::models::Arrayofstrings) {
    self.translations = Some(translations);
  }

  pub fn with_translations(mut self, translations: ::models::Arrayofstrings) -> FiltersResults {
    self.translations = Some(translations);
    self
  }

  pub fn translations(&self) -> Option<&::models::Arrayofstrings> {
    self.translations.as_ref()
  }

  pub fn reset_translations(&mut self) {
    self.translations = None;
  }

  pub fn set_wordlist(&mut self, wordlist: ::models::Arrayofstrings) {
    self.wordlist = Some(wordlist);
  }

  pub fn with_wordlist(mut self, wordlist: ::models::Arrayofstrings) -> FiltersResults {
    self.wordlist = Some(wordlist);
    self
  }

  pub fn wordlist(&self) -> Option<&::models::Arrayofstrings> {
    self.wordlist.as_ref()
  }

  pub fn reset_wordlist(&mut self) {
    self.wordlist = None;
  }

}



