/*
 *
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SynonymsAntonymsInner {
  #[serde(rename = "domains")]
  domains: Option<Vec<String>>,
  #[serde(rename = "id")]
  id: String,
  #[serde(rename = "language")]
  language: Option<String>,
  /// A particular area in which the Sense occurs, e.g. 'Great Britain'
  #[serde(rename = "regions")]
  regions: Option<Vec<String>>,
  /// A level of language usage, typically with respect to formality. e.g. 'offensive', 'informal'
  #[serde(rename = "registers")]
  registers: Option<Vec<String>>,
  #[serde(rename = "text")]
  text: String,
}

impl SynonymsAntonymsInner {
  pub fn new(id: String, text: String) -> SynonymsAntonymsInner {
    SynonymsAntonymsInner {
      domains: None,
      id: id,
      language: None,
      regions: None,
      registers: None,
      text: text,
    }
  }

  pub fn set_domains(&mut self, domains: Vec<String>) {
    self.domains = Some(domains);
  }

  pub fn with_domains(mut self, domains: Vec<String>) -> SynonymsAntonymsInner {
    self.domains = Some(domains);
    self
  }

  pub fn domains(&self) -> Option<&Vec<String>> {
    self.domains.as_ref()
  }

  pub fn reset_domains(&mut self) {
    self.domains = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> SynonymsAntonymsInner {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }

  pub fn set_language(&mut self, language: String) {
    self.language = Some(language);
  }

  pub fn with_language(mut self, language: String) -> SynonymsAntonymsInner {
    self.language = Some(language);
    self
  }

  pub fn language(&self) -> Option<&String> {
    self.language.as_ref()
  }

  pub fn reset_language(&mut self) {
    self.language = None;
  }

  pub fn set_regions(&mut self, regions: Vec<String>) {
    self.regions = Some(regions);
  }

  pub fn with_regions(mut self, regions: Vec<String>) -> SynonymsAntonymsInner {
    self.regions = Some(regions);
    self
  }

  pub fn regions(&self) -> Option<&Vec<String>> {
    self.regions.as_ref()
  }

  pub fn reset_regions(&mut self) {
    self.regions = None;
  }

  pub fn set_registers(&mut self, registers: Vec<String>) {
    self.registers = Some(registers);
  }

  pub fn with_registers(mut self, registers: Vec<String>) -> SynonymsAntonymsInner {
    self.registers = Some(registers);
    self
  }

  pub fn registers(&self) -> Option<&Vec<String>> {
    self.registers.as_ref()
  }

  pub fn reset_registers(&mut self) {
    self.registers = None;
  }

  pub fn set_text(&mut self, text: String) {
    self.text = text;
  }

  pub fn with_text(mut self, text: String) -> SynonymsAntonymsInner {
    self.text = text;
    self
  }

  pub fn text(&self) -> &String {
    &self.text
  }
}
