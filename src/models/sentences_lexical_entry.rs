/* 
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// SentencesLexicalEntry : Description of an entry for a particular part of speech

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SentencesLexicalEntry {
  #[serde(rename = "grammaticalFeatures")]
  grammatical_features: Option<::models::GrammaticalFeaturesList>,
  /// IANA language code
  #[serde(rename = "language")]
  language: String,
  /// A linguistic category of words (or more precisely lexical items), generally defined by the syntactic or morphological behaviour of the lexical item in question, such as noun or verb
  #[serde(rename = "lexicalCategory")]
  lexical_category: Option<String>,
  /// A list of examples of use sentences
  #[serde(rename = "sentences")]
  sentences: ::models::ExamplesList,
  /// A given written or spoken realisation of a an entry.
  #[serde(rename = "text")]
  text: String
}

impl SentencesLexicalEntry {
  /// Description of an entry for a particular part of speech
  pub fn new(language: String, sentences: ::models::ExamplesList, text: String) -> SentencesLexicalEntry {
    SentencesLexicalEntry {
      grammatical_features: None,
      language: language,
      lexical_category: None,
      sentences: sentences,
      text: text
    }
  }

  pub fn set_grammatical_features(&mut self, grammatical_features: ::models::GrammaticalFeaturesList) {
    self.grammatical_features = Some(grammatical_features);
  }

  pub fn with_grammatical_features(mut self, grammatical_features: ::models::GrammaticalFeaturesList) -> SentencesLexicalEntry {
    self.grammatical_features = Some(grammatical_features);
    self
  }

  pub fn grammatical_features(&self) -> Option<&::models::GrammaticalFeaturesList> {
    self.grammatical_features.as_ref()
  }

  pub fn reset_grammatical_features(&mut self) {
    self.grammatical_features = None;
  }

  pub fn set_language(&mut self, language: String) {
    self.language = language;
  }

  pub fn with_language(mut self, language: String) -> SentencesLexicalEntry {
    self.language = language;
    self
  }

  pub fn language(&self) -> &String {
    &self.language
  }


  pub fn set_lexical_category(&mut self, lexical_category: String) {
    self.lexical_category = Some(lexical_category);
  }

  pub fn with_lexical_category(mut self, lexical_category: String) -> SentencesLexicalEntry {
    self.lexical_category = Some(lexical_category);
    self
  }

  pub fn lexical_category(&self) -> Option<&String> {
    self.lexical_category.as_ref()
  }

  pub fn reset_lexical_category(&mut self) {
    self.lexical_category = None;
  }

  pub fn set_sentences(&mut self, sentences: ::models::ExamplesList) {
    self.sentences = sentences;
  }

  pub fn with_sentences(mut self, sentences: ::models::ExamplesList) -> SentencesLexicalEntry {
    self.sentences = sentences;
    self
  }

  pub fn sentences(&self) -> &::models::ExamplesList {
    &self.sentences
  }


  pub fn set_text(&mut self, text: String) {
    self.text = text;
  }

  pub fn with_text(mut self, text: String) -> SentencesLexicalEntry {
    self.text = text;
    self
  }

  pub fn text(&self) -> &String {
    &self.text
  }


}



