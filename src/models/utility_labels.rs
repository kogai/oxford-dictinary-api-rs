/* 
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// UtilityLabels : Schema for lexicalcategories, registers utility endpoints.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UtilityLabels {
  /// Additional Information provided by OUP
  #[serde(rename = "metadata")]
  metadata: Option<Value>,
  /// Mapping of labels available.
  #[serde(rename = "results")]
  results: Option<::std::collections::HashMap<String, ::models::UtilityLabelsResults>>
}

impl UtilityLabels {
  /// Schema for lexicalcategories, registers utility endpoints.
  pub fn new() -> UtilityLabels {
    UtilityLabels {
      metadata: None,
      results: None
    }
  }

  pub fn set_metadata(&mut self, metadata: Value) {
    self.metadata = Some(metadata);
  }

  pub fn with_metadata(mut self, metadata: Value) -> UtilityLabels {
    self.metadata = Some(metadata);
    self
  }

  pub fn metadata(&self) -> Option<&Value> {
    self.metadata.as_ref()
  }

  pub fn reset_metadata(&mut self) {
    self.metadata = None;
  }

  pub fn set_results(&mut self, results: ::std::collections::HashMap<String, ::models::UtilityLabelsResults>) {
    self.results = Some(results);
  }

  pub fn with_results(mut self, results: ::std::collections::HashMap<String, ::models::UtilityLabelsResults>) -> UtilityLabels {
    self.results = Some(results);
    self
  }

  pub fn results(&self) -> Option<&::std::collections::HashMap<String, ::models::UtilityLabelsResults>> {
    self.results.as_ref()
  }

  pub fn reset_results(&mut self) {
    self.results = None;
  }

}



