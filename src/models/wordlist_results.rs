/* 
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// WordlistResults : Description of found word

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct WordlistResults {
  /// The identifier of a word
  #[serde(rename = "id")]
  id: String,
  #[serde(rename = "matchType")]
  match_type: Option<String>,
  /// Name of region.
  #[serde(rename = "region")]
  region: Option<String>,
  /// A given written or spoken realisation of a an entry, lowercased.
  #[serde(rename = "word")]
  word: String
}

impl WordlistResults {
  /// Description of found word
  pub fn new(id: String, word: String) -> WordlistResults {
    WordlistResults {
      id: id,
      match_type: None,
      region: None,
      word: word
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> WordlistResults {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_match_type(&mut self, match_type: String) {
    self.match_type = Some(match_type);
  }

  pub fn with_match_type(mut self, match_type: String) -> WordlistResults {
    self.match_type = Some(match_type);
    self
  }

  pub fn match_type(&self) -> Option<&String> {
    self.match_type.as_ref()
  }

  pub fn reset_match_type(&mut self) {
    self.match_type = None;
  }

  pub fn set_region(&mut self, region: String) {
    self.region = Some(region);
  }

  pub fn with_region(mut self, region: String) -> WordlistResults {
    self.region = Some(region);
    self
  }

  pub fn region(&self) -> Option<&String> {
    self.region.as_ref()
  }

  pub fn reset_region(&mut self) {
    self.region = None;
  }

  pub fn set_word(&mut self, word: String) {
    self.word = word;
  }

  pub fn with_word(mut self, word: String) -> WordlistResults {
    self.word = word;
    self
  }

  pub fn word(&self) -> &String {
    &self.word
  }


}



