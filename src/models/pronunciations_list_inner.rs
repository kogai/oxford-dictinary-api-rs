/* 
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PronunciationsListInner : A grouping of pronunciation information

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PronunciationsListInner {
  /// The URL of the sound file
  #[serde(rename = "audioFile")]
  audio_file: Option<String>,
  /// A local or regional variation where the pronunciation occurs, e.g. 'British English'
  #[serde(rename = "dialects")]
  dialects: Option<::models::Arrayofstrings>,
  /// The alphabetic system used to display the phonetic spelling
  #[serde(rename = "phoneticNotation")]
  phonetic_notation: Option<String>,
  /// Phonetic spelling is the representation of vocal sounds which express pronunciations of words. It is a system of spelling in which each letter represents invariably the same spoken sound
  #[serde(rename = "phoneticSpelling")]
  phonetic_spelling: Option<String>,
  /// A particular area in which the pronunciation occurs, e.g. 'Great Britain'
  #[serde(rename = "regions")]
  regions: Option<::models::Arrayofstrings>
}

impl PronunciationsListInner {
  /// A grouping of pronunciation information
  pub fn new() -> PronunciationsListInner {
    PronunciationsListInner {
      audio_file: None,
      dialects: None,
      phonetic_notation: None,
      phonetic_spelling: None,
      regions: None
    }
  }

  pub fn set_audio_file(&mut self, audio_file: String) {
    self.audio_file = Some(audio_file);
  }

  pub fn with_audio_file(mut self, audio_file: String) -> PronunciationsListInner {
    self.audio_file = Some(audio_file);
    self
  }

  pub fn audio_file(&self) -> Option<&String> {
    self.audio_file.as_ref()
  }

  pub fn reset_audio_file(&mut self) {
    self.audio_file = None;
  }

  pub fn set_dialects(&mut self, dialects: ::models::Arrayofstrings) {
    self.dialects = Some(dialects);
  }

  pub fn with_dialects(mut self, dialects: ::models::Arrayofstrings) -> PronunciationsListInner {
    self.dialects = Some(dialects);
    self
  }

  pub fn dialects(&self) -> Option<&::models::Arrayofstrings> {
    self.dialects.as_ref()
  }

  pub fn reset_dialects(&mut self) {
    self.dialects = None;
  }

  pub fn set_phonetic_notation(&mut self, phonetic_notation: String) {
    self.phonetic_notation = Some(phonetic_notation);
  }

  pub fn with_phonetic_notation(mut self, phonetic_notation: String) -> PronunciationsListInner {
    self.phonetic_notation = Some(phonetic_notation);
    self
  }

  pub fn phonetic_notation(&self) -> Option<&String> {
    self.phonetic_notation.as_ref()
  }

  pub fn reset_phonetic_notation(&mut self) {
    self.phonetic_notation = None;
  }

  pub fn set_phonetic_spelling(&mut self, phonetic_spelling: String) {
    self.phonetic_spelling = Some(phonetic_spelling);
  }

  pub fn with_phonetic_spelling(mut self, phonetic_spelling: String) -> PronunciationsListInner {
    self.phonetic_spelling = Some(phonetic_spelling);
    self
  }

  pub fn phonetic_spelling(&self) -> Option<&String> {
    self.phonetic_spelling.as_ref()
  }

  pub fn reset_phonetic_spelling(&mut self) {
    self.phonetic_spelling = None;
  }

  pub fn set_regions(&mut self, regions: ::models::Arrayofstrings) {
    self.regions = Some(regions);
  }

  pub fn with_regions(mut self, regions: ::models::Arrayofstrings) -> PronunciationsListInner {
    self.regions = Some(regions);
    self
  }

  pub fn regions(&self) -> Option<&::models::Arrayofstrings> {
    self.regions.as_ref()
  }

  pub fn reset_regions(&mut self) {
    self.regions = None;
  }

}



