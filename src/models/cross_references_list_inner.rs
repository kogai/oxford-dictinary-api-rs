/* 
 * 
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// CrossReferencesListInner : cross references of a sense

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CrossReferencesListInner {
  /// The word id of cooccurrence
  #[serde(rename = "id")]
  id: String,
  /// The word of cooccurrence
  #[serde(rename = "text")]
  text: String,
  /// The type of relation between the two words. Possible values are 'close match', 'related', 'see also', 'variant spelling', and 'abbreviation' in case of crossreferences, or 'pre', 'post' in case of collocates.
  #[serde(rename = "type")]
  _type: String
}

impl CrossReferencesListInner {
  /// cross references of a sense
  pub fn new(id: String, text: String, _type: String) -> CrossReferencesListInner {
    CrossReferencesListInner {
      id: id,
      text: text,
      _type: _type
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> CrossReferencesListInner {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_text(&mut self, text: String) {
    self.text = text;
  }

  pub fn with_text(mut self, text: String) -> CrossReferencesListInner {
    self.text = text;
    self
  }

  pub fn text(&self) -> &String {
    &self.text
  }


  pub fn set__type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with__type(mut self, _type: String) -> CrossReferencesListInner {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }


}



